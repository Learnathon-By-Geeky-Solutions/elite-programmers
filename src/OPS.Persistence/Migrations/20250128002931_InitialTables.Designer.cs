// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OPS.Persistence;

#nullable disable

namespace OPS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250128002931_InitialTables")]
    partial class InitialTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("McqAnswer", b =>
                {
                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("McqOptionId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId", "McqOptionId");

                    b.HasIndex("McqOptionId");

                    b.ToTable("McqAnswers", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Auth.Otp", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(minute,(5),getdate()))");

                    b.HasKey("Email");

                    b.ToTable("Otps", "auth");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Auth.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long?>("CloudFileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OtpEmail")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("CloudFileId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OtpEmail");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "auth");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.Property<long>("CloudFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CloudFileId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CloudFileId");

                    b.HasIndex("UserId");

                    b.ToTable("CloudFiles", "core");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.LogEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("LogEvents", "core");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.ProgLanguage", b =>
                {
                    b.Property<long>("ProgLanguagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProgLanguagesId"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProgLanguagesId");

                    b.HasIndex("Language")
                        .IsUnique();

                    b.ToTable("ProgLanguages", "enum");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.QuestionType", b =>
                {
                    b.Property<long>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionTypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes", "enum");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", "enum");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.SocialPlatform", b =>
                {
                    b.Property<long>("SocialPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SocialPlatformId"));

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SocialPlatformId");

                    b.HasIndex("PlatformName")
                        .IsUnique();

                    b.ToTable("SocialPlatforms", "enum");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.ExamCandidate", b =>
                {
                    b.Property<long>("ExamCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExamCandidateId"));

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamCandidateId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamCandidates", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Examination", b =>
                {
                    b.Property<long>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExamId"));

                    b.Property<DateTime>("ClosesAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpensAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ExamId");

                    b.ToTable("Examinations", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.FlaggedSolution", b =>
                {
                    b.Property<long>("FlaggedSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FlaggedSolutionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserSolutionId")
                        .HasColumnType("bigint");

                    b.HasKey("FlaggedSolutionId");

                    b.HasIndex("UserSolutionId");

                    b.ToTable("FlaggedSolution", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.McqOption", b =>
                {
                    b.Property<long>("McqOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("McqOptionId"));

                    b.Property<string>("Optionn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("McqOptionId");

                    b.ToTable("McqOptions", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Problem", b =>
                {
                    b.Property<long>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProblemId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProblemId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Problems", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.TestCase", b =>
                {
                    b.Property<long>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TestCaseId"));

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("TestCaseId");

                    b.HasIndex("ProblemId");

                    b.ToTable("TestCases", "exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.Social", b =>
                {
                    b.Property<long>("SocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SocialId"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("SocialPlatformId")
                        .HasColumnType("bigint");

                    b.HasKey("SocialId");

                    b.HasIndex("SocialPlatformId");

                    b.ToTable("Socials", "usr");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserDetail", b =>
                {
                    b.Property<long>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserDetailsId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailsId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails", "usr");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserMcqAnswer", b =>
                {
                    b.Property<long>("UserMcqAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserMcqAnswerId"));

                    b.Property<long>("McqOptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserMcqAnswerId");

                    b.HasIndex("McqOptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMcqAnswers", "usr");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserSolution", b =>
                {
                    b.Property<long>("UserSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserSolutionId"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProblemId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProgLanguagesId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSolutionId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("ProgLanguagesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSolutions", "usr");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserWrittenAnswer", b =>
                {
                    b.Property<long>("UserWrittenAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserWrittenAnswerId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserWrittenAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWrittenAnswers", "usr");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF2760AD02D51B95");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "auth");
                });

            modelBuilder.Entity("UserSocial", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "SocialId")
                        .HasName("PK__UserSoci__A1F43B5D0C5D0F96");

                    b.HasIndex("SocialId");

                    b.ToTable("UserSocials", "usr");
                });

            modelBuilder.Entity("McqAnswer", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.McqOption", null)
                        .WithMany()
                        .HasForeignKey("McqOptionId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired();
                });

            modelBuilder.Entity("OPS.Domain.Entities.Auth.User", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Core.CloudFile", "CloudFile")
                        .WithMany("Users")
                        .HasForeignKey("CloudFileId");

                    b.HasOne("OPS.Domain.Entities.Auth.Otp", "Otp")
                        .WithMany()
                        .HasForeignKey("OtpEmail");

                    b.Navigation("CloudFile");

                    b.Navigation("Otp");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Auth.User", "User")
                        .WithMany("CloudFiles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.ExamCandidate", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Examination", "Exam")
                        .WithMany("ExamCandidates")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.FlaggedSolution", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Usr.UserSolution", "UserSolution")
                        .WithMany("FlaggedSolutions")
                        .HasForeignKey("UserSolutionId")
                        .IsRequired();

                    b.Navigation("UserSolution");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Problem", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("Problems")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Examination", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Enum.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.TestCase", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemId")
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.Social", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Enum.SocialPlatform", "SocialPlatform")
                        .WithMany("Socials")
                        .HasForeignKey("SocialPlatformId")
                        .IsRequired();

                    b.Navigation("SocialPlatform");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserDetail", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Auth.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("OPS.Domain.Entities.Usr.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserMcqAnswer", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.McqOption", "McqOption")
                        .WithMany("UserMcqAnswers")
                        .HasForeignKey("McqOptionId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("UserMcqAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Auth.User", "User")
                        .WithMany("UserMcqAnswers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("McqOption");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserSolution", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Problem", "Problem")
                        .WithMany("UserSolutions")
                        .HasForeignKey("ProblemId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Enum.ProgLanguage", "ProgLanguages")
                        .WithMany("UserSolutions")
                        .HasForeignKey("ProgLanguagesId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Auth.User", "User")
                        .WithMany("UserSolutions")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("ProgLanguages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserWrittenAnswer", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("UserWrittenAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Auth.User", null)
                        .WithMany("UserWrittenAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Enum.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleI__5070F446");

                    b.HasOne("OPS.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserI__4F7CD00D");
                });

            modelBuilder.Entity("UserSocial", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Usr.Social", null)
                        .WithMany()
                        .HasForeignKey("SocialId")
                        .IsRequired()
                        .HasConstraintName("FK__UserSocia__Socia__49C3F6B7");

                    b.HasOne("OPS.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserSocia__UserI__48CFD27E");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Auth.User", b =>
                {
                    b.Navigation("CloudFiles");

                    b.Navigation("UserDetail");

                    b.Navigation("UserMcqAnswers");

                    b.Navigation("UserSolutions");

                    b.Navigation("UserWrittenAnswers");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.ProgLanguage", b =>
                {
                    b.Navigation("UserSolutions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.SocialPlatform", b =>
                {
                    b.Navigation("Socials");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Examination", b =>
                {
                    b.Navigation("ExamCandidates");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.McqOption", b =>
                {
                    b.Navigation("UserMcqAnswers");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Problem", b =>
                {
                    b.Navigation("TestCases");

                    b.Navigation("UserSolutions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.Navigation("Problems");

                    b.Navigation("UserMcqAnswers");

                    b.Navigation("UserWrittenAnswers");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Usr.UserSolution", b =>
                {
                    b.Navigation("FlaggedSolutions");
                });
#pragma warning restore 612, 618
        }
    }
}
